namespace ProjectEulerInFSharp

open Math
open Extensions

module Solutions =

    // If we list all the natural numbers below 10 that are
    // multiples of 3 or 5, we get 3, 5, 6 and 9. The sum
    // of these multiples is 23.
    let Problem1Example () =
        [1 .. 9]
        |> Seq.filter (fun n -> n.DividesBy(3) || n.DividesBy(5))
        |> Seq.sum;

    // Find the sum of all the multiples of 3 or 5 below 1000
    let Problem1Solution () =
        [1 .. 999]
        |> Seq.filter (fun n -> n.DividesBy(3) || n.DividesBy(5))
        |> Seq.sum;

    // Each new term in the Fibonacci sequence is generated by
    // adding the previous two terms. By starting with 1 and 2,
    // the first 10 terms will be:
    //
    //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    // By considering the terms in the Fibonacci sequence whose
    // values do not exceed four million, find the sum of the
    // even-valued terms.
    let Problem2Solution () =
        InfiniteFibonacciSequence ()
        |> Seq.takeWhile (fun n -> n < 4000000)
        |> Seq.filter (fun n -> n.DividesBy(2))
        |> Seq.sum


    // The prime factors of 13195 are 5, 7, 13 and 29.
    let Problem3Example () =
        let limit = (13195L + 1L) / 2L
        PrimesUpTo limit 
        |> Seq.toList
        |> List.filter (fun n -> 13195L |> DividesBy n)

    // What is the largest prime factor of the number 600851475143 ?
    let Problem3Solution () =
        let x = 600851475143L
        let limit = sqrt (float x)
        [0L..int64 limit]
        |> Seq.filter (fun n -> x |> DividesBy n)
        |> Seq.max

    /// <summary>
    /// A palindromic number reads the same both ways. The largest palindrome made from the
    /// product of two 2-digit numbers is 9009 = 91 × 99.
    /// </summary>
    let Problem4Example () =
        AllProductsOfXDigitNumbers(2)
        |> Seq.filter IsPalindromic
        |> Seq.max

        /// <summary>
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
    let Problem4Solution () =
        AllProductsOfXDigitNumbers(3)
        |> Seq.filter IsPalindromic
        |> Seq.max
