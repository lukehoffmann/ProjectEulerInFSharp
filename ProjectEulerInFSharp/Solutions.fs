namespace ProjectEulerInFSharp

open System
open Math
open Extensions

module Solutions =

    // If we list all the natural numbers below 10 that are
    // multiples of 3 or 5, we get 3, 5, 6 and 9. The sum
    // of these multiples is 23.
    let Problem1Example () =
        [1 .. 9]
            |> Seq.filter (fun n -> n.DividesBy(3) || n.DividesBy(5))
            |> Seq.sum;

    // Find the sum of all the multiples of 3 or 5 below 1000
    let Problem1Solution () =
        [1 .. 999]
            |> Seq.filter (fun n -> n.DividesBy(3) || n.DividesBy(5))
            |> Seq.sum;

    // Each new term in the Fibonacci sequence is generated by
    // adding the previous two terms. By starting with 1 and 2,
    // the first 10 terms will be:
    //
    //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    //
    // By considering the terms in the Fibonacci sequence whose
    // values do not exceed four million, find the sum of the
    // even-valued terms.
    let Problem2Solution () =
        InfiniteFibonacciSequence ()
            |> Seq.takeWhile (fun n -> n < 4000000)
            |> Seq.filter (fun n -> n.DividesBy(2))
            |> Seq.sum


    // The prime factors of 13195 are 5, 7, 13 and 29.
    let Problem3Example () =
        FactorsOf(13195L)
            |> Seq.filter IsPrime

    // What is the largest prime factor of the number 600851475143 ?
    let Problem3Solution () =
        FactorsOf(600851475143L)
            |> Seq.filter (fun n -> IsPrime n)
            |> Seq.max

    /// <summary>
    /// A palindromic number reads the same both ways. The largest palindrome made from the
    /// product of two 2-digit numbers is 9009 = 91 × 99.
    /// </summary>
    let Problem4Example () =
        AllProductsOfXDigitNumbers(2)
            |> Seq.filter IsPalindromic
            |> Seq.max

    /// <summary>
    /// Find the largest palindrome made from the product of two 3-digit numbers.
    /// </summary>
    let Problem4Solution () =
        AllProductsOfXDigitNumbers(3)
            |> Seq.filter IsPalindromic
            |> Seq.max

    /// <summary>
    /// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10
    /// without any remainder.
    /// </summary>
    let Problem5Example() =
        SmallestMultipleOf [1..10];

    /// <summary>
    /// What is the smallest positive number that is evenly divisible by all of the numbers
    /// 1 to 20
    /// </summary>
    let Problem5Solution () =
        SmallestMultipleOf [1..20];

    /// <summary>
    /// 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
    /// </summary>
    let Problem16Example () =
        (pown 2I 15)
            .Digits
            |> Seq.sum;

    /// <summary>
    /// What is the sum of the digits of the number 2^1000?
    /// </summary>
    let Problem16Solution () =
        (pown 2I 1000)
            .Digits
            |> Seq.sum;

    let Problem17Solution () =
        [1 .. 1000]
           |> Seq.map NumberLetterCounter.LettersNeededToSpell
           |> Seq.sum
