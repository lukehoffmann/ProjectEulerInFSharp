namespace ProjectEulerTests_FSharp

open System.Linq;
open Microsoft.VisualStudio.TestTools.UnitTesting;
open ProjectEulerInCSharp;

[<TestClass>]
type MathHelpersTests () =

    [<TestMethod>]
    member this.TestFactorsOf () =

        let result = MathHelpers.FactorsOf(1L);
        Assert.AreEqual(1, result.Count);
        Assert.IsTrue(result.Contains(1L));

        let result = MathHelpers.FactorsOf(2L);
        Assert.AreEqual(2, result.Count);
        Assert.IsTrue(result.Contains(1L));
        Assert.IsTrue(result.Contains(2L));

        let result = MathHelpers.FactorsOf(3L);
        Assert.AreEqual(2, result.Count);
        Assert.IsTrue(result.Contains(1L));
        Assert.IsFalse(result.Contains(2L));
        Assert.IsTrue(result.Contains(3L));

        let result = MathHelpers.FactorsOf(12L);
        Assert.AreEqual(6, result.Count);
        Assert.IsTrue(result.Contains(1L));
        Assert.IsTrue(result.Contains(2L));
        Assert.IsTrue(result.Contains(3L));
        Assert.IsTrue(result.Contains(4L));
        Assert.IsFalse(result.Contains(5L));
        Assert.IsTrue(result.Contains(6L));
        Assert.IsTrue(result.Contains(12L));

        result = MathHelpers.FactorsOf(232792560L);

    [<TestMethod>]
    member this.FibonacciNumbersTest() =

        //Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        //By starting with 1 and 2, the first 10 terms will be:
        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        let result = MathHelpers.FibonacciNumbersUpTo(100).ToList();

        Assert.AreEqual(1, result.[0]);
        Assert.AreEqual(2, result.[1]);
        Assert.AreEqual(3, result.[2]);
        Assert.AreEqual(5, result.[3]);
        Assert.AreEqual(8, result.[4]);
        Assert.AreEqual(13, result.[5]);
        Assert.AreEqual(21, result.[6]);
        Assert.AreEqual(34, result.[7]);
        Assert.AreEqual(55, result.[8]);
        Assert.AreEqual(89, result.[9]);

    [<TestMethod>]
    member this.LargestPrimeFactorsTest() =

        //Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        //By starting with 1 and 2, the first 10 terms will be:
        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        Assert.AreEqual(29L, MathHelpers.PrimeFactorsOf(13195L).Max());

    [<TestMethod>]
    member this.IsPythagoreanTripletTest() =

        Assert.IsTrue(MathHelpers.IsPythagoreanTriplet(3, 4, 5));

    [<TestMethod>]
    member this.SumOfPrimesBelowTest() =

        // The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
        Assert.AreEqual(17L, MathHelpers.SumOfPrimesBelow(10));

    [<TestMethod>]
    member this.TriangleNumbers() =

        //The sequence of triangle numbers is generated by adding the natural numbers.
        //So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
        //The first ten terms would be:

        let result = MathHelpers.TriangleNumbers(10L).ToList();

        // 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
        Assert.AreEqual(10, result.Count);
        Assert.AreEqual(1L, result.[0]);
        Assert.AreEqual(3L, result.[1]);
        Assert.AreEqual(6L, result.[2]);
        Assert.AreEqual(10L, result.[3]);
        Assert.AreEqual(15L, result.[4]);
        Assert.AreEqual(21L, result.[5]);
        Assert.AreEqual(28L, result.[6]);
        Assert.AreEqual(36L, result.[7]);
        Assert.AreEqual(45L, result.[8]);
        Assert.AreEqual(55L, result.[9]);

    [<TestMethod>]
    member this.FirstTriangleNumberWhere() =

        //The sequence of triangle numbers is generated by adding the natural numbers.
        //So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
        //The first ten terms would be:

        // 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Assert.AreEqual(1L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 0L));
        Assert.AreEqual(3L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 1L));
        Assert.AreEqual(6L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 3L));
        Assert.AreEqual(10L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 6L));
        Assert.AreEqual(15L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 10L));
        Assert.AreEqual(21L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 15L));
        Assert.AreEqual(28L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 21L));
        Assert.AreEqual(36L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 28L));
        Assert.AreEqual(45L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 36L));
        Assert.AreEqual(55L, MathHelpers.FirstTriangleNumberWhere(fun n -> n > 45L));
